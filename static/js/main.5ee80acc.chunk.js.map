{"version":3,"sources":["components/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Dashboard.module.css","components/Controls/Controls.module.css","services/notify.jsx","components/Controls/Controls.jsx","components/Balance/Balance.jsx","components/TransactionHistory/TransactionHistory.jsx","services/storage.jsx","components/Dashboard/Dashboard.jsx","components/App/App.jsx","index.js","components/Balance/Balance.module.css"],"names":["module","exports","toast","configure","notifySettings","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","notifyError","notEnoughAmount","error","enterCorrectAmount","typeOfOperation","DEPOSIT","WITHDROWAL","Controls","state","amount","handleInputChange","e","setState","Number","currentTarget","value","validInput","preventDefault","notyfy","props","onBalance","name","onWithdraw","onDeposit","this","className","styles","controls","type","controls__input","onChange","controls__button","onClick","Component","Balance","income","expenses","balance","balance__txt","toFixed","TransactionHistory","items","history","history__head","map","id","date","key","localStorage","setItem","JSON","stringify","console","log","transactions","getItem","parse","Dashboard","createTransaction","transaction","shortid","generate","Date","toLocaleString","transactionAmount","filter","reduce","sum","storageTransactions","storage","prevState","dashboard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ee80acc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__1pPDB\",\"history__head\":\"TransactionHistory_history__head__2ilSi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__1vg5j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__Ksdeh\",\"controls__input\":\"Controls_controls__input__2gczE\",\"controls__button\":\"Controls_controls__button__1K-5c\"};","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\n\nconst notifySettings = {\n    position: 'bottom-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n};\n\nconst notifyError = {\n    NOT_ENOUGH_AMOUNT: 'На счету недостаточно средств для проведения операции!',\n    ENTER_CORRECT_AMOUNT: 'Введите корректную сумму для проведения операции!',\n};\n\nconst notEnoughAmount = () => toast.error(notifyError.NOT_ENOUGH_AMOUNT, notifySettings);\n\nconst enterCorrectAmount = () => toast.error(notifyError.ENTER_CORRECT_AMOUNT, notifySettings);\n\nexport default { notEnoughAmount, enterCorrectAmount };\n\n","import React, { Component } from 'react';\r\n\r\nimport styles from './Controls.module.css';\r\nimport notyfy from '../../services/notify';\r\n\r\nconst typeOfOperation = {\r\n    DEPOSIT: 'Deposit',\r\n    WITHDROWAL: 'Withdrawal',\r\n};\r\n\r\nclass Controls extends Component {\r\n    state = {\r\n        amount: '',\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            amount: Number(e.currentTarget.value),\r\n        });\r\n    };\r\n\r\n    validInput = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ amount: '' });\r\n\r\n        if (this.state.amount <= 0) {\r\n            notyfy.enterCorrectAmount();\r\n            return;\r\n        }\r\n\r\n        if ((this.state.amount > this.props.onBalance) && (e.currentTarget.name === 'Withdraw')) {\r\n            notyfy.notEnoughAmount();\r\n            return;\r\n        }\r\n\r\n        if (e.currentTarget.name === 'Deposit') {\r\n            this.props.onDeposit(this.state.amount, typeOfOperation.DEPOSIT);\r\n            return;\r\n        }\r\n\r\n        this.props.onWithdraw(this.state.amount, typeOfOperation.WITHDROWAL);\r\n    };\r\n\r\n\r\n    render() {\r\n        const { amount } = this.state;\r\n        return (\r\n            <section className={styles.controls}>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"amount\"\r\n                    className={styles.controls__input}\r\n                    value={amount}\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <button\r\n                    type=\"button\"\r\n                    name=\"Deposit\"\r\n                    className={styles.controls__button}\r\n                    onClick={this.validInput}\r\n                >\r\n                    Deposit\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    name=\"Withdraw\"\r\n                    className={styles.controls__button}\r\n                    onClick={this.validInput}\r\n                >\r\n                    Withdraw\r\n                </button>\r\n            </section>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\n\r\nimport styles from './Balance.module.css';\r\n\r\nconst Balance = ({ income, expenses, balance }) => (\r\n    <section className={styles.balance}>\r\n        <span className={styles.balance__txt}>️{income.toFixed(2)}$</span>\r\n        <span className={styles.balance__txt}>{expenses.toFixed(2)}$</span>\r\n        <span className={styles.balance__txt}>Balance: {balance.toFixed(2)}$</span>\r\n    </section>\r\n\r\n);\r\n\r\nBalance.propTypes = {\r\n    income: T.number.isRequired,\r\n    expenses: T.number.isRequired,\r\n    balance: T.number.isRequired,\r\n};\r\n\r\nexport default Balance;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\n\r\nimport styles from './TransactionHistory.module.css';\r\n\r\nconst TransactionHistory = ({ items }) => (\r\n    <table className={styles.history}>\r\n        <thead className={styles.history__head}>\r\n            <tr>\r\n                <th>Transaction</th>\r\n                <th>Amount</th>\r\n                <th>Date</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {items.map(({ id, type, amount, date }) => (\r\n                <tr key={id}>\r\n                    <td>{type}</td>\r\n                    <td>{amount.toFixed(2)}$</td>\r\n                    <td>{date}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n);\r\n\r\nTransactionHistory.propTypes = {\r\n    items: T.arrayOf(\r\n        T.shape({\r\n            id: T.string.isRequired,\r\n            type: T.string.isRequired,\r\n            amount: T.number.isRequired,\r\n            date: T.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n};\r\n\r\nexport default TransactionHistory;\r\n","const save = (key, value) => {\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst get = key => {\n    try {\n        const transactions = localStorage.getItem(key);\n        return transactions ? JSON.parse(transactions) : null;\n    } catch (e) {\n        console.log('error');\n    }\n\n    return null;\n};\n\nexport default {\n    save,\n    get,\n};","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\n\r\nimport styles from './Dashboard.module.css';\r\n\r\nimport Controls from '../Controls'\r\nimport Balance from '../Balance'\r\nimport TransactionHistory from '../TransactionHistory'\r\n\r\nimport storage from '../../services/storage';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    state = {\r\n        transactions: [],\r\n        balance: 0,\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        const storageTransactions = storage.get('Transactions');\r\n\r\n        if (storageTransactions) {\r\n            this.setState({\r\n                transactions: storageTransactions.transactions,\r\n                balance: storageTransactions.balance,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n\r\n        const { transactions, balance } = this.state;\r\n\r\n        if (prevState.transactions !== transactions) {\r\n            storage.save('Transactions', { transactions, balance });\r\n        }\r\n    }\r\n\r\n    createTransaction = (amount, type) => {\r\n\r\n        const transaction = {\r\n            id: shortid.generate(),\r\n            type,\r\n            amount,\r\n            date: new Date().toLocaleString(),\r\n        };\r\n\r\n        this.setState(state => ({\r\n            transactions: [...state.transactions, transaction],\r\n            balance: transaction.type === 'Deposit' ? state.balance + amount : state.balance - amount,\r\n        }));\r\n    };\r\n\r\n    transactionAmount = (type) => {\r\n        return this.state.transactions\r\n            .filter(transaction => transaction.type === type)\r\n            .reduce((sum, transaction) => sum += transaction.amount, 0);\r\n    }\r\n\r\n    render() {\r\n        const { balance, transactions } = this.state;\r\n\r\n        return (\r\n            < div className={styles.dashboard} >\r\n                <Controls\r\n                    onDeposit={this.createTransaction}\r\n                    onWithdraw={this.createTransaction}\r\n                    onBalance={balance}\r\n                />\r\n                <Balance\r\n                    income={this.transactionAmount('Deposit')}\r\n                    expenses={this.transactionAmount('Withdrawal')}\r\n                    balance={balance}\r\n                />\r\n                <TransactionHistory items={transactions} />\r\n            </div >\r\n        )\r\n    }\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nimport Dashboard from '../Dashboard'\r\n\r\nconst App = () => (\r\n    <Dashboard />\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'normalize.css';\r\nimport './index.css';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__1dVnM\",\"balance__txt\":\"Balance_balance__txt__zp260\"};"],"sourceRoot":""}